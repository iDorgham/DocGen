{
  "meta": {
    "project": "DocGen CLI",
    "date": "2025-09-13",
    "prepared_by": "Generated by TestSprite"
  },
  "product_overview": "DocGen CLI is a powerful command-line tool designed to generate comprehensive project documentation from specifications using spec-driven development principles. It supports multi-project management, flexible document generation with professional templates, robust validation, advanced error handling, and integration with MCP servers to enhance development workflows.",
  "core_goals": [
    "Enable users to create, manage, and switch between multiple documentation projects efficiently using YAML storage.",
    "Provide flexible and professional document generation capabilities including technical specifications, project plans, and marketing materials output in markdown, HTML, and PDF formats.",
    "Ensure high data integrity and input validation through comprehensive Pydantic-based validation and robust error handling with actionable user guidance.",
    "Support customization and extension with a template management system using Jinja2, including custom templates and filters.",
    "Integrate seamlessly with MCP servers like Byterover, TestSprite, Context7, and Browser Tools for knowledge management, automated testing, quality assurance, and task management.",
    "Deliver a user-friendly interactive CLI experience with guided prompts, rich formatting, and consistent command structures.",
    "Maintain high performance, reliability, security, and cross-platform compatibility with automated testing and quality assurance measures."
  ],
  "key_features": [
    "Interactive CLI with guided prompts and rich text formatting for user-friendly project and document management.",
    "Multi-document generation supporting technical specifications, project plans, and marketing materials using Jinja2 templates.",
    "Multiple output formats including markdown, HTML, and PDF with options for custom output paths.",
    "Project management capabilities to create, switch, view status, and list recent projects with data stored securely in YAML format.",
    "Comprehensive validation of project data and templates using Pydantic models with error reporting and recovery suggestions.",
    "Advanced error handling system providing clear, actionable messages and automated error recovery.",
    "Template management with support for professional, customizable Jinja2 templates including inheritance, validation, and installation of custom templates.",
    "Integration with Git for version control including initialization, committing changes, and branch management.",
    "MCP integration for enhanced workflow support including automated testing, knowledge management, task tracking, and quality audits.",
    "Robust quality assurance including automated testing coverage, performance benchmarks, security validations, and cross-platform support."
  ],
  "user_flow_summary": [
    "User initializes a new project via interactive CLI prompting for project details, which is validated and stored in YAML format.",
    "User switches between existing projects and checks project status with clear feedback on project existence and documentation availability.",
    "User generates documents by selecting the type (spec, plan, marketing, or all) specifying output format and optional output path; system renders documents using Jinja2 templates.",
    "User validates project data through CLI command triggering Pydantic validation models, receiving detailed error and warning reports with actionable suggestions.",
    "User manages templates by listing available templates filtered by type, installing new templates from sources, and validating templates before use.",
    "User integrates with MCP servers to bootstrap testing, generate code summaries, and access knowledge management services.",
    "User handles errors through CLI commands generating reports detailing error counts, categories, severities, and recommendations for resolution.",
    "Advanced users utilize git integration commands to initialize repositories, commit changes with messages, and check git status ensuring source control consistency."
  ],
  "validation_criteria": [
    "All CLI commands execute successfully and produce expected outcomes based on valid inputs.",
    "Project creation commands validate project uniqueness and correct YAML storage without errors.",
    "Document generation outputs valid, complete documents in all supported formats (markdown, HTML, PDF) following template structures.",
    "Input validation correctly detects errors and warnings with comprehensive messages and suggestions.",
    "Error handling module provides clear, actionable error reports and supports recovery workflows without crashes.",
    "Template management supports loading, listing, installation, and validation of templates with no syntax or security issues.",
    "MCP integration commands interact correctly with external MCP servers, producing expected results and maintaining stable connections.",
    "Performance benchmarks meet requirements: document generation under 5 seconds, project switching under 1 second, template rendering under 2 seconds.",
    "Comprehensive automated tests cover at least 80% of codebase; linting and type checking pass consistently.",
    "System runs reliably across supported platforms (Windows, macOS, Linux) with consistent behavior and security compliance."
  ],
  "code_summary": {
    "tech_stack": [
      "Python",
      "Click",
      "Jinja2",
      "Pydantic",
      "Rich",
      "PyYAML",
      "WeasyPrint",
      "email-validator",
      "requests",
      "semantic-version",
      "markdown",
      "pdfkit",
      "Playwright"
    ],
    "features": [
      {
        "name": "Project Management API",
        "description": "Create, manage, and switch between multiple DocGen projects with YAML storage",
        "files": [
          "src/cli/main.py",
          "src/core/project_manager.py",
          "src/models/project_model.py"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "info": {
            "title": "DocGen Project Management API",
            "version": "1.0.0",
            "description": "API for managing DocGen projects"
          },
          "paths": {
            "/project/create": {
              "post": {
                "summary": "Create a new project",
                "parameters": [
                  {
                    "name": "name",
                    "in": "query",
                    "required": true,
                    "schema": {
                      "type": "string"
                    }
                  },
                  {
                    "name": "path",
                    "in": "query",
                    "required": true,
                    "schema": {
                      "type": "string"
                    }
                  },
                  {
                    "name": "description",
                    "in": "query",
                    "required": false,
                    "schema": {
                      "type": "string"
                    }
                  }
                ],
                "responses": {
                  "200": {
                    "description": "Project created successfully",
                    "content": {
                      "application/json": {
                        "schema": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "name": {
                              "type": "string"
                            },
                            "path": {
                              "type": "string"
                            },
                            "created_at": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "/project/status": {
              "get": {
                "summary": "Get project status",
                "responses": {
                  "200": {
                    "description": "Project status retrieved",
                    "content": {
                      "application/json": {
                        "schema": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string"
                            },
                            "id": {
                              "type": "string"
                            },
                            "path": {
                              "type": "string"
                            },
                            "exists": {
                              "type": "boolean"
                            },
                            "has_docs": {
                              "type": "boolean"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      {
        "name": "Document Generation API",
        "description": "Generate technical specifications, project plans, and marketing materials from project data using Jinja2 templates",
        "files": [
          "src/cli/main.py",
          "src/core/generator.py",
          "src/core/template_manager.py",
          "src/templates/technical_spec.j2",
          "src/templates/project_plan.j2",
          "src/templates/marketing.j2"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "info": {
            "title": "DocGen Document Generation API",
            "version": "1.0.0",
            "description": "API for generating documents from project data"
          },
          "paths": {
            "/generate/spec": {
              "post": {
                "summary": "Generate technical specification",
                "parameters": [
                  {
                    "name": "format",
                    "in": "query",
                    "required": false,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "markdown",
                        "html",
                        "pdf"
                      ],
                      "default": "markdown"
                    }
                  },
                  {
                    "name": "output",
                    "in": "query",
                    "required": false,
                    "schema": {
                      "type": "string"
                    }
                  }
                ],
                "responses": {
                  "200": {
                    "description": "Document generated successfully",
                    "content": {
                      "application/json": {
                        "schema": {
                          "type": "object",
                          "properties": {
                            "output_path": {
                              "type": "string"
                            },
                            "format": {
                              "type": "string"
                            },
                            "size": {
                              "type": "integer"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "/generate/plan": {
              "post": {
                "summary": "Generate project plan",
                "parameters": [
                  {
                    "name": "format",
                    "in": "query",
                    "required": false,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "markdown",
                        "html",
                        "pdf"
                      ],
                      "default": "markdown"
                    }
                  }
                ],
                "responses": {
                  "200": {
                    "description": "Project plan generated successfully"
                  }
                }
              }
            },
            "/generate/marketing": {
              "post": {
                "summary": "Generate marketing materials",
                "parameters": [
                  {
                    "name": "format",
                    "in": "query",
                    "required": false,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "markdown",
                        "html",
                        "pdf"
                      ],
                      "default": "markdown"
                    }
                  }
                ],
                "responses": {
                  "200": {
                    "description": "Marketing materials generated successfully"
                  }
                }
              }
            }
          }
        }
      },
      {
        "name": "Validation API",
        "description": "Comprehensive input validation and data integrity checks using Pydantic models",
        "files": [
          "src/cli/main.py",
          "src/core/validation.py",
          "src/utils/validation.py",
          "src/models/template_model.py"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "info": {
            "title": "DocGen Validation API",
            "version": "1.0.0",
            "description": "API for validating project data and templates"
          },
          "paths": {
            "/validate/project": {
              "post": {
                "summary": "Validate project data",
                "parameters": [
                  {
                    "name": "project_id",
                    "in": "query",
                    "required": false,
                    "schema": {
                      "type": "string"
                    }
                  },
                  {
                    "name": "fix_issues",
                    "in": "query",
                    "required": false,
                    "schema": {
                      "type": "boolean",
                      "default": false
                    }
                  }
                ],
                "responses": {
                  "200": {
                    "description": "Validation completed",
                    "content": {
                      "application/json": {
                        "schema": {
                          "type": "object",
                          "properties": {
                            "valid": {
                              "type": "boolean"
                            },
                            "errors": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "warnings": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      {
        "name": "Template Management API",
        "description": "Manage Jinja2 templates with metadata, validation, and custom template support",
        "files": [
          "src/cli/main.py",
          "src/core/template_manager.py",
          "src/templates/",
          "src/models/template_model.py"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "info": {
            "title": "DocGen Template Management API",
            "version": "1.0.0",
            "description": "API for managing document templates"
          },
          "paths": {
            "/templates/list": {
              "get": {
                "summary": "List available templates",
                "parameters": [
                  {
                    "name": "type",
                    "in": "query",
                    "required": false,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "spec",
                        "plan",
                        "marketing",
                        "custom"
                      ]
                    }
                  }
                ],
                "responses": {
                  "200": {
                    "description": "Templates listed successfully",
                    "content": {
                      "application/json": {
                        "schema": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string"
                              },
                              "name": {
                                "type": "string"
                              },
                              "type": {
                                "type": "string"
                              },
                              "version": {
                                "type": "string"
                              },
                              "author": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "/templates/install": {
              "post": {
                "summary": "Install a template",
                "parameters": [
                  {
                    "name": "source",
                    "in": "query",
                    "required": true,
                    "schema": {
                      "type": "string"
                    }
                  },
                  {
                    "name": "name",
                    "in": "query",
                    "required": false,
                    "schema": {
                      "type": "string"
                    }
                  }
                ],
                "responses": {
                  "200": {
                    "description": "Template installed successfully"
                  }
                }
              }
            }
          }
        }
      },
      {
        "name": "Git Integration API",
        "description": "Git version control integration with automatic commits and branch management",
        "files": [
          "src/cli/main.py",
          "src/core/git_manager.py"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "info": {
            "title": "DocGen Git Integration API",
            "version": "1.0.0",
            "description": "API for Git version control integration"
          },
          "paths": {
            "/git/init": {
              "post": {
                "summary": "Initialize Git repository",
                "parameters": [
                  {
                    "name": "initial_commit",
                    "in": "query",
                    "required": false,
                    "schema": {
                      "type": "boolean",
                      "default": true
                    }
                  },
                  {
                    "name": "branch",
                    "in": "query",
                    "required": false,
                    "schema": {
                      "type": "string",
                      "default": "main"
                    }
                  }
                ],
                "responses": {
                  "200": {
                    "description": "Git repository initialized successfully"
                  }
                }
              }
            },
            "/git/commit": {
              "post": {
                "summary": "Commit changes",
                "parameters": [
                  {
                    "name": "message",
                    "in": "query",
                    "required": false,
                    "schema": {
                      "type": "string"
                    }
                  },
                  {
                    "name": "auto",
                    "in": "query",
                    "required": false,
                    "schema": {
                      "type": "boolean",
                      "default": false
                    }
                  }
                ],
                "responses": {
                  "200": {
                    "description": "Changes committed successfully"
                  }
                }
              }
            },
            "/git/status": {
              "get": {
                "summary": "Get Git repository status",
                "responses": {
                  "200": {
                    "description": "Git status retrieved",
                    "content": {
                      "application/json": {
                        "schema": {
                          "type": "object",
                          "properties": {
                            "current_branch": {
                              "type": "string"
                            },
                            "has_uncommitted_changes": {
                              "type": "boolean"
                            },
                            "untracked_files": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "modified_files": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      {
        "name": "MCP Integration API",
        "description": "Integration with MCP servers for enhanced development workflow including Byterover, TestSprite, Context7, and Browser Tools",
        "files": [
          "src/commands/mcp.py",
          "assets/dev/config/mcp/",
          "scripts/setup_testsprite_api.py",
          "scripts/test_testsprite_config.py",
          "scripts/run_testsprite_tests.py"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "info": {
            "title": "DocGen MCP Integration API",
            "version": "1.0.0",
            "description": "API for MCP server integration"
          },
          "paths": {
            "/mcp/testsprite/bootstrap": {
              "post": {
                "summary": "Bootstrap TestSprite testing",
                "parameters": [
                  {
                    "name": "localPort",
                    "in": "query",
                    "required": true,
                    "schema": {
                      "type": "integer"
                    }
                  },
                  {
                    "name": "type",
                    "in": "query",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "frontend",
                        "backend"
                      ]
                    }
                  },
                  {
                    "name": "testScope",
                    "in": "query",
                    "required": true,
                    "schema": {
                      "type": "string",
                      "enum": [
                        "codebase",
                        "diff"
                      ]
                    }
                  }
                ],
                "responses": {
                  "200": {
                    "description": "TestSprite bootstrap completed successfully"
                  }
                }
              }
            },
            "/mcp/testsprite/generate-code-summary": {
              "post": {
                "summary": "Generate code summary for TestSprite",
                "responses": {
                  "200": {
                    "description": "Code summary generated successfully"
                  }
                }
              }
            }
          }
        }
      },
      {
        "name": "Error Handling API",
        "description": "Advanced error recovery and user guidance with actionable suggestions",
        "files": [
          "src/core/error_handler.py",
          "src/cli/main.py"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "info": {
            "title": "DocGen Error Handling API",
            "version": "1.0.0",
            "description": "API for error handling and recovery"
          },
          "paths": {
            "/error/report": {
              "get": {
                "summary": "Generate error report",
                "parameters": [
                  {
                    "name": "output",
                    "in": "query",
                    "required": false,
                    "schema": {
                      "type": "string"
                    }
                  }
                ],
                "responses": {
                  "200": {
                    "description": "Error report generated",
                    "content": {
                      "application/json": {
                        "schema": {
                          "type": "object",
                          "properties": {
                            "total_errors": {
                              "type": "integer"
                            },
                            "categories": {
                              "type": "object"
                            },
                            "severities": {
                              "type": "object"
                            },
                            "recent_errors": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "message": {
                                    "type": "string"
                                  },
                                  "severity": {
                                    "type": "string"
                                  },
                                  "suggestions": {
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    ]
  }
}
