{
  "tech_stack": [
    "Python",
    "Click",
    "Jinja2",
    "Pydantic",
    "Rich",
    "PyYAML",
    "WeasyPrint",
    "email-validator",
    "requests",
    "semantic-version",
    "markdown",
    "pdfkit",
    "Playwright"
  ],
  "features": [
    {
      "name": "Project Management API",
      "description": "Create, manage, and switch between multiple DocGen projects with YAML storage",
      "files": [
        "src/cli/main.py",
        "src/core/project_manager.py",
        "src/models/project_model.py"
      ],
      "api_doc": {
        "openapi": "3.0.0",
        "info": {
          "title": "DocGen Project Management API",
          "version": "1.0.0",
          "description": "API for managing DocGen projects"
        },
        "paths": {
          "/project/create": {
            "post": {
              "summary": "Create a new project",
              "parameters": [
                {
                  "name": "name",
                  "in": "query",
                  "required": true,
                  "schema": {"type": "string"}
                },
                {
                  "name": "path",
                  "in": "query",
                  "required": true,
                  "schema": {"type": "string"}
                },
                {
                  "name": "description",
                  "in": "query",
                  "required": false,
                  "schema": {"type": "string"}
                }
              ],
              "responses": {
                "200": {
                  "description": "Project created successfully",
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "id": {"type": "string"},
                          "name": {"type": "string"},
                          "path": {"type": "string"},
                          "created_at": {"type": "string"}
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "/project/status": {
            "get": {
              "summary": "Get project status",
              "responses": {
                "200": {
                  "description": "Project status retrieved",
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "name": {"type": "string"},
                          "id": {"type": "string"},
                          "path": {"type": "string"},
                          "exists": {"type": "boolean"},
                          "has_docs": {"type": "boolean"}
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    {
      "name": "Document Generation API",
      "description": "Generate technical specifications, project plans, and marketing materials from project data using Jinja2 templates",
      "files": [
        "src/cli/main.py",
        "src/core/generator.py",
        "src/core/template_manager.py",
        "src/templates/technical_spec.j2",
        "src/templates/project_plan.j2",
        "src/templates/marketing.j2"
      ],
      "api_doc": {
        "openapi": "3.0.0",
        "info": {
          "title": "DocGen Document Generation API",
          "version": "1.0.0",
          "description": "API for generating documents from project data"
        },
        "paths": {
          "/generate/spec": {
            "post": {
              "summary": "Generate technical specification",
              "parameters": [
                {
                  "name": "format",
                  "in": "query",
                  "required": false,
                  "schema": {
                    "type": "string",
                    "enum": ["markdown", "html", "pdf"],
                    "default": "markdown"
                  }
                },
                {
                  "name": "output",
                  "in": "query",
                  "required": false,
                  "schema": {"type": "string"}
                }
              ],
              "responses": {
                "200": {
                  "description": "Document generated successfully",
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "output_path": {"type": "string"},
                          "format": {"type": "string"},
                          "size": {"type": "integer"}
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "/generate/plan": {
            "post": {
              "summary": "Generate project plan",
              "parameters": [
                {
                  "name": "format",
                  "in": "query",
                  "required": false,
                  "schema": {
                    "type": "string",
                    "enum": ["markdown", "html", "pdf"],
                    "default": "markdown"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "Project plan generated successfully"
                }
              }
            }
          },
          "/generate/marketing": {
            "post": {
              "summary": "Generate marketing materials",
              "parameters": [
                {
                  "name": "format",
                  "in": "query",
                  "required": false,
                  "schema": {
                    "type": "string",
                    "enum": ["markdown", "html", "pdf"],
                    "default": "markdown"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "Marketing materials generated successfully"
                }
              }
            }
          }
        }
      }
    },
    {
      "name": "Validation API",
      "description": "Comprehensive input validation and data integrity checks using Pydantic models",
      "files": [
        "src/cli/main.py",
        "src/core/validation.py",
        "src/utils/validation.py",
        "src/models/template_model.py"
      ],
      "api_doc": {
        "openapi": "3.0.0",
        "info": {
          "title": "DocGen Validation API",
          "version": "1.0.0",
          "description": "API for validating project data and templates"
        },
        "paths": {
          "/validate/project": {
            "post": {
              "summary": "Validate project data",
              "parameters": [
                {
                  "name": "project_id",
                  "in": "query",
                  "required": false,
                  "schema": {"type": "string"}
                },
                {
                  "name": "fix_issues",
                  "in": "query",
                  "required": false,
                  "schema": {"type": "boolean", "default": false}
                }
              ],
              "responses": {
                "200": {
                  "description": "Validation completed",
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "valid": {"type": "boolean"},
                          "errors": {
                            "type": "array",
                            "items": {"type": "string"}
                          },
                          "warnings": {
                            "type": "array",
                            "items": {"type": "string"}
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    {
      "name": "Template Management API",
      "description": "Manage Jinja2 templates with metadata, validation, and custom template support",
      "files": [
        "src/cli/main.py",
        "src/core/template_manager.py",
        "src/templates/",
        "src/models/template_model.py"
      ],
      "api_doc": {
        "openapi": "3.0.0",
        "info": {
          "title": "DocGen Template Management API",
          "version": "1.0.0",
          "description": "API for managing document templates"
        },
        "paths": {
          "/templates/list": {
            "get": {
              "summary": "List available templates",
              "parameters": [
                {
                  "name": "type",
                  "in": "query",
                  "required": false,
                  "schema": {
                    "type": "string",
                    "enum": ["spec", "plan", "marketing", "custom"]
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "Templates listed successfully",
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "id": {"type": "string"},
                            "name": {"type": "string"},
                            "type": {"type": "string"},
                            "version": {"type": "string"},
                            "author": {"type": "string"}
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "/templates/install": {
            "post": {
              "summary": "Install a template",
              "parameters": [
                {
                  "name": "source",
                  "in": "query",
                  "required": true,
                  "schema": {"type": "string"}
                },
                {
                  "name": "name",
                  "in": "query",
                  "required": false,
                  "schema": {"type": "string"}
                }
              ],
              "responses": {
                "200": {
                  "description": "Template installed successfully"
                }
              }
            }
          }
        }
      }
    },
    {
      "name": "Git Integration API",
      "description": "Git version control integration with automatic commits and branch management",
      "files": [
        "src/cli/main.py",
        "src/core/git_manager.py"
      ],
      "api_doc": {
        "openapi": "3.0.0",
        "info": {
          "title": "DocGen Git Integration API",
          "version": "1.0.0",
          "description": "API for Git version control integration"
        },
        "paths": {
          "/git/init": {
            "post": {
              "summary": "Initialize Git repository",
              "parameters": [
                {
                  "name": "initial_commit",
                  "in": "query",
                  "required": false,
                  "schema": {"type": "boolean", "default": true}
                },
                {
                  "name": "branch",
                  "in": "query",
                  "required": false,
                  "schema": {"type": "string", "default": "main"}
                }
              ],
              "responses": {
                "200": {
                  "description": "Git repository initialized successfully"
                }
              }
            }
          },
          "/git/commit": {
            "post": {
              "summary": "Commit changes",
              "parameters": [
                {
                  "name": "message",
                  "in": "query",
                  "required": false,
                  "schema": {"type": "string"}
                },
                {
                  "name": "auto",
                  "in": "query",
                  "required": false,
                  "schema": {"type": "boolean", "default": false}
                }
              ],
              "responses": {
                "200": {
                  "description": "Changes committed successfully"
                }
              }
            }
          },
          "/git/status": {
            "get": {
              "summary": "Get Git repository status",
              "responses": {
                "200": {
                  "description": "Git status retrieved",
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "current_branch": {"type": "string"},
                          "has_uncommitted_changes": {"type": "boolean"},
                          "untracked_files": {
                            "type": "array",
                            "items": {"type": "string"}
                          },
                          "modified_files": {
                            "type": "array",
                            "items": {"type": "string"}
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    {
      "name": "MCP Integration API",
      "description": "Integration with MCP servers for enhanced development workflow including Byterover, TestSprite, Context7, and Browser Tools",
      "files": [
        "src/commands/mcp.py",
        "assets/dev/config/mcp/",
        "scripts/setup_testsprite_api.py",
        "scripts/test_testsprite_config.py",
        "scripts/run_testsprite_tests.py"
      ],
      "api_doc": {
        "openapi": "3.0.0",
        "info": {
          "title": "DocGen MCP Integration API",
          "version": "1.0.0",
          "description": "API for MCP server integration"
        },
        "paths": {
          "/mcp/testsprite/bootstrap": {
            "post": {
              "summary": "Bootstrap TestSprite testing",
              "parameters": [
                {
                  "name": "localPort",
                  "in": "query",
                  "required": true,
                  "schema": {"type": "integer"}
                },
                {
                  "name": "type",
                  "in": "query",
                  "required": true,
                  "schema": {
                    "type": "string",
                    "enum": ["frontend", "backend"]
                  }
                },
                {
                  "name": "testScope",
                  "in": "query",
                  "required": true,
                  "schema": {
                    "type": "string",
                    "enum": ["codebase", "diff"]
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "TestSprite bootstrap completed successfully"
                }
              }
            }
          },
          "/mcp/testsprite/generate-code-summary": {
            "post": {
              "summary": "Generate code summary for TestSprite",
              "responses": {
                "200": {
                  "description": "Code summary generated successfully"
                }
              }
            }
          }
        }
      }
    },
    {
      "name": "Error Handling API",
      "description": "Advanced error recovery and user guidance with actionable suggestions",
      "files": [
        "src/core/error_handler.py",
        "src/cli/main.py"
      ],
      "api_doc": {
        "openapi": "3.0.0",
        "info": {
          "title": "DocGen Error Handling API",
          "version": "1.0.0",
          "description": "API for error handling and recovery"
        },
        "paths": {
          "/error/report": {
            "get": {
              "summary": "Generate error report",
              "parameters": [
                {
                  "name": "output",
                  "in": "query",
                  "required": false,
                  "schema": {"type": "string"}
                }
              ],
              "responses": {
                "200": {
                  "description": "Error report generated",
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "total_errors": {"type": "integer"},
                          "categories": {"type": "object"},
                          "severities": {"type": "object"},
                          "recent_errors": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "message": {"type": "string"},
                                "severity": {"type": "string"},
                                "suggestions": {
                                  "type": "array",
                                  "items": {"type": "string"}
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ]
}
