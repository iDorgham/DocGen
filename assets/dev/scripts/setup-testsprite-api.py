#!/usr/bin/env python3
"""
TestSprite API Key Setup Script

This script helps you configure the TestSprite API key for the DocGen CLI project.
"""

import os
import sys
from pathlib import Path

def load_env_file():
    """Load environment variables from .env file."""
    project_root = Path(__file__).parent.parent
    env_file = project_root / ".env"
    
    if env_file.exists():
        with open(env_file, 'r') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    os.environ[key.strip()] = value.strip()

# Load environment variables from .env file
load_env_file()


def create_env_file():
    """Create .env file with TestSprite API key configuration."""
    project_root = Path(__file__).parent.parent
    env_file = project_root / ".env"
    
    print("üîß TestSprite API Key Setup")
    print("=" * 50)
    print()
    print("To get your TestSprite API key:")
    print("1. Visit: https://www.testsprite.com/dashboard/settings/apikey")
    print("2. Sign in to your TestSprite account")
    print("3. Create a new API key")
    print("4. Copy the API key")
    print()
    
    # Get API key from user
    api_key = input("Enter your TestSprite API key: ").strip()
    
    if not api_key:
        print("‚ùå No API key provided. Exiting.")
        return False
    
    # Create .env file content
    env_content = f"""# DocGen CLI Environment Configuration
# Generated by setup_testsprite_api.py

# TestSprite API Configuration
TESTSPRITE_API_KEY={api_key}

# Development Configuration
DEBUG=false
LOG_LEVEL=INFO
"""
    
    try:
        # Write .env file
        with open(env_file, "w") as f:
            f.write(env_content)
        
        print(f"‚úÖ .env file created successfully at: {env_file}")
        print()
        print("üîç Next steps:")
        print("1. Restart your terminal/IDE to load the new environment variables")
        print("2. Test the configuration by running: python scripts/test_testsprite_config.py")
        print("3. Run TestSprite tests: python scripts/run_testsprite_tests.py")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error creating .env file: {str(e)}")
        return False


def verify_api_key():
    """Verify that the TestSprite API key is properly configured."""
    print("üîç Verifying TestSprite API key configuration...")
    
    # Check if .env file exists
    project_root = Path(__file__).parent.parent
    env_file = project_root / ".env"
    
    if not env_file.exists():
        print("‚ùå .env file not found. Please run the setup script first.")
        return False
    
    # Check if API key is set
    api_key = os.getenv("TESTSPRITE_API_KEY")
    
    if not api_key:
        print("‚ùå TESTSPRITE_API_KEY environment variable not found.")
        print("   Please restart your terminal/IDE after creating the .env file.")
        return False
    
    if api_key == "your_testsprite_api_key_here":
        print("‚ùå Please replace the placeholder API key with your actual TestSprite API key.")
        return False
    
    print(f"‚úÖ TestSprite API key is configured: {api_key[:8]}...")
    return True


def test_testsprite_connection():
    """Test the TestSprite API connection."""
    print("üß™ Testing TestSprite API connection...")
    
    try:
        # Import TestSprite MCP tools
        from mcp_TestSprite_testsprite_bootstrap_tests import testsprite_bootstrap_tests
        
        # Test with a simple bootstrap
        project_path = str(Path(__file__).parent.parent)
        
        print(f"   Project path: {project_path}")
        print("   Testing TestSprite bootstrap...")
        
        # This would normally call the TestSprite MCP function
        # For now, we'll just verify the API key is set
        api_key = os.getenv("TESTSPRITE_API_KEY")
        
        if api_key and api_key != "your_testsprite_api_key_here":
            print("‚úÖ TestSprite API key is properly configured")
            print("‚úÖ Ready to use TestSprite MCP tools")
            return True
        else:
            print("‚ùå TestSprite API key not properly configured")
            return False
            
    except ImportError as e:
        print(f"‚ùå TestSprite MCP tools not available: {str(e)}")
        print("   Make sure you're running this in the correct environment")
        return False
    except Exception as e:
        print(f"‚ùå Error testing TestSprite connection: {str(e)}")
        return False


def main():
    """Main function to set up TestSprite API key."""
    print("üöÄ TestSprite API Key Setup for DocGen CLI")
    print("=" * 60)
    print()
    
    # Check if .env file already exists
    project_root = Path(__file__).parent.parent
    env_file = project_root / ".env"
    
    if env_file.exists():
        print("üìÅ .env file already exists.")
        choice = input("Do you want to update the TestSprite API key? (y/n): ").strip().lower()
        
        if choice == 'y':
            create_env_file()
        else:
            print("‚úÖ Using existing .env file")
    else:
        create_env_file()
    
    print()
    
    # Verify configuration
    if verify_api_key():
        print()
        test_testsprite_connection()
    
    print()
    print("üéâ TestSprite API key setup complete!")
    print()
    print("üìö Additional resources:")
    print("- TestSprite Dashboard: https://www.testsprite.com/dashboard")
    print("- API Documentation: https://www.testsprite.com/docs")
    print("- TestSprite MCP Integration: assets/dev/config/mcp/MCP_INTEGRATION_GUIDE.md")


if __name__ == "__main__":
    main()
