[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "docgen-cli"
version = "1.0.0"
description = "A powerful CLI tool for generating project documentation from specifications using spec-driven development principles"
authors = [{name = "DocGen Team", email = "team@docgen.dev"}]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.8"
keywords = ["cli", "documentation", "generator", "spec-driven", "jinja2", "templates"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Documentation",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Text Processing :: Markup",
    "Environment :: Console",
    "Operating System :: OS Independent",
]
dependencies = [
    "click>=8.0.0",
    "jinja2>=3.0.0",
    "pyyaml>=6.0",
    "rich>=13.0.0",
    "pydantic>=2.0.0",
    "email-validator>=2.0.0",
    "requests>=2.28.0",
    "semantic-version>=2.10.0",
    "markdown>=3.4.0",
    "pdfkit>=1.0.0",
    "numpy>=1.24.0",
    "scikit-learn>=1.3.0",
    "joblib>=1.3.0",
    "watchdog>=6.0.0",
]

[project.urls]
Homepage = "https://github.com/docgen-cli/docgen-cli"
Documentation = "https://docgen-cli.readthedocs.io"
Repository = "https://github.com/docgen-cli/docgen-cli.git"
Issues = "https://github.com/docgen-cli/docgen-cli/issues"
Changelog = "https://github.com/docgen-cli/docgen-cli/blob/main/CHANGELOG.md"

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-timeout>=2.0.0",
    "black>=23.0.0",
    "isort>=5.0.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "psutil>=5.9.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-timeout>=2.0.0",
    "pytest-mock>=3.10.0",
    "pytest-xdist>=3.3.0",
]
docs = [
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.2.0",
    "myst-parser>=1.0.0",
]
performance = [
    "psutil>=5.9.0",
    "memory-profiler>=0.60.0",
    "py-spy>=0.3.14",
]

[project.scripts]
docgen = "src.cli_main:main"

[tool.setuptools.packages.find]
where = ["src"]
include = ["*"]

[tool.black]
line-length = 88
target-version = ['py38']

[tool.isort]
profile = "black"
line_length = 88

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--verbose",
    "--tb=short",
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml:coverage.xml",
    "--cov-fail-under=80"
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "slow: Slow running tests",
    "cli: CLI tests",
    "performance: Performance tests"
]
timeout = 300
timeout_method = "thread"

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/__pycache__/*",
    "*/migrations/*",
    "*/settings/*",
    "*/manage.py"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod"
]
